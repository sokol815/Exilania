  /// <summary>
        /// 
        /// </summary>
        /// <returns>returns false if no water moved!</returns>
        public bool update_water()
        {
            run_liquid_opposite = !run_liquid_opposite;
            total_world_water = 0;
            for (int i = 0; i < players.Count; i++)
            {
                Vector2 center = new Vector2(players[i].avatar.world_loc.X, players[i].avatar.world_loc.Y);
                top_left = new Vector2(center.X - 960, center.Y - 540);
                if (top_left.Y < 0)
                    top_left.Y = 0;
                else if (top_left.Y > map.GetLength(1) * 24 - (1080))
                {
                    top_left.Y = map.GetLength(1) * 24 - 1080;
                }
                Point offset = new Point((int)top_left.X / 24, (int)top_left.Y / 24);
                for (int x = offset.X - 2; x < offset.X + 84; x++)
                {
                    for (int y = offset.Y - 2; y < offset.Y + 49; y++)
                    {
                        total_world_water += map[wraparound_x(x), y].liquid_level;
                        if (map[wraparound_x(x), y].liquid_updated)
                        {
                            map[wraparound_x(x), y].prev_liquid_level = map[wraparound_x(x), y].liquid_level;
                            map[wraparound_x(x), y].liquid_updated = false;
                            if (map[wraparound_x(x), y].liquid_pressure > 0 && skip_frames % 10 == 0)
                                map[wraparound_x(x), y].liquid_pressure--;
                        }
                    }
                }
            }
            for (int i = 0; i < players.Count; i++)
            {
                Vector2 center = new Vector2(players[i].avatar.world_loc.X, players[i].avatar.world_loc.Y);
                top_left = new Vector2(center.X - 960, center.Y - 540);
                if (top_left.Y < 0)
                    top_left.Y = 0;
                else if (top_left.Y > map.GetLength(1) * 24 - (1080))
                {
                    top_left.Y = map.GetLength(1) * 24 - 1080;
                }
                Point offset = new Point((int)top_left.X / 24, (int)top_left.Y / 24);
                int start_x = offset.X -2;
                int end_x = offset.X + 84;
                int dx = 1;
                if (run_liquid_opposite)
                {
                    start_x = offset.X + 84;
                    end_x = offset.X - 3;
                    dx = -1;
                }
                for (int x = start_x; x != end_x; x+=dx)
                {
                    for (int y = offset.Y + 49; y > offset.Y-3; y--)
                    {
                        if ( y > -1 && y < map.GetLength(1) && map[wraparound_x(x), y].liquid_updated == false && map[wraparound_x(x), y].prev_liquid_level != 0)
                        { //calculate the water for the row below!
                            //working with row y+1
                            move_water(wraparound_x(x), y);
                        }
                        map[wraparound_x(x), y].liquid_updated = true;
                    }
                }
            }
            return false;
        }

        public void init_liquid(int x, int y)
        {
            x = wraparound_x(x);
            map[x, y].liquid_id = map[x, y].liquid_id;
            map[x, y].fgd_block_type = 5;
            map[x, y].fgd_block = 16;
            if (map[x, y].liquid_level == 1)
                map[x, y].fgd_block_type = -1;
            else
            {
                map[x, y].fgd_block_type = 5;
                map[x, y].fgd_ver = (byte)(map[x, y].liquid_level / 9);
            }
        }

        public void clear_liquid(int x, int y)
        {
            x = wraparound_x(x);
            map[x, y].fgd_block = -1;
            map[x, y].liquid_id = 0;
            map[x, y].liquid_level = 0;
            map[x, y].fgd_block_type = -1;
            map[x, y].liquid_pressure = 0;
            if(map[x, y - 1].liquid_pressure > 0)
                map[x, y - 1].liquid_pressure--;
        }

        /// <summary>
        /// can or does the tile in question hold/can hold liquid?
        /// </summary>
        /// <param name="loc"></param>
        /// <returns></returns>
        public bool is_valid_liquid_tile(Point loc)
        {
            loc.X = wraparound_x(loc.X);
            if (map[loc.X, loc.Y].fgd_block_type == 5 || map[loc.X, loc.Y].fgd_block_type == -1)
            {
                return true;
            }
            return false;
        }

        public void transfer_liquid(Point from, Point to, byte amount)
        {
            from.X = wraparound_x(from.X);
            to.X = wraparound_x(to.X);
            map[from.X, from.Y].liquid_level -= amount;
            map[to.X, to.Y].liquid_level += amount;
            if (map[to.X, to.Y].fgd_block == -1)
                init_liquid(to.X, to.Y);
            else
            {
                if (map[to.X, to.Y].liquid_level == 1)
                    map[to.X, to.Y].fgd_block_type = -1;
                else
                {
                    map[to.X, to.Y].fgd_block_type = 5;
                    if (map[to.X, to.Y].liquid_level > 116)
                        map[to.X, to.Y].fgd_ver = 12;
                    map[to.X, to.Y].fgd_ver = (byte)(map[to.X, to.Y].liquid_level / 9);
                }
            }
            if (map[from.X, from.Y].liquid_level == 0)
            {
                clear_liquid(from.X, from.Y);
            }
            else
            {
                if (map[from.X, from.Y].liquid_level == 1)
                    map[from.X, from.Y].fgd_block_type = -1;
                else
                {
                    if (map[from.X, from.Y].fgd_block == -1)
                    init_liquid(from.X, from.Y);
                    map[from.X, from.Y].fgd_block_type = 5;
                    if (map[from.X, from.Y].liquid_level > 116)
                        map[from.X, from.Y].fgd_ver = 12;
                    map[from.X, from.Y].fgd_ver = (byte)(map[from.X, from.Y].liquid_level / 9);
                }
            }
        }

        public byte get_liquid_level(Point loc)
        {
            return map[wraparound_x(loc.X), loc.Y].liquid_level;
        }

        public byte amt_can_add(Point loc)
        {
            return (byte)(100 - map[wraparound_x(loc.X), loc.Y].liquid_level);
        }

        public bool to_target_greater(Point from, Point to, byte amt)
        {
            from.X = wraparound_x(from.X);
            to.X = wraparound_x(to.X);
            if (map[from.X, from.Y].liquid_level - amt < map[to.X, to.Y].liquid_level + amt)
                return true;
            return false;
        }

        public byte calc_transfer_even(Point from, Point to)
        {
            byte total = (byte)((map[from.X, from.Y].liquid_level + map[to.X, to.Y].liquid_level)/2);
            return (byte)(map[from.X, from.Y].liquid_level - total);
        }

        public byte max_liquid(Point at)
        {
            return (byte)(((map[at.X, at.Y].liquid_pressure > 25 ? 25 : map[at.X, at.Y].liquid_pressure) * 10) + 100);
        }

        public void set_pressure(Point at)
        {
            if (map[at.X, at.Y].liquid_level < 100)
            {
                map[at.X, at.Y].liquid_pressure = 0;
                return;
            }
            if (map[at.X, at.Y].liquid_level >= 100)
            {
                map[at.X, at.Y].liquid_pressure = (byte)(map[at.X, at.Y - 1].liquid_pressure + 1);
            }
            if (map[wraparound_x(at.X - 1), at.Y].liquid_level > 0 && map[wraparound_x(at.X - 1), at.Y].liquid_pressure > map[at.X, at.Y].liquid_pressure)
            {
                map[at.X, at.Y].liquid_pressure = map[wraparound_x(at.X - 1), at.Y].liquid_pressure;
            }
            if (map[wraparound_x(at.X + 1), at.Y].liquid_level > 0 && map[wraparound_x(at.X + 1), at.Y].liquid_pressure > map[at.X, at.Y].liquid_pressure)
            {
                map[at.X, at.Y].liquid_pressure = map[wraparound_x(at.X + 1), at.Y].liquid_pressure;
            }
        }

    
        public void move_water(int x, int y)
        {
            Point this_pt = new Point(x,y);     
            Point left_pt = new Point(wraparound_x(x-1),y);
            Point right_pt = new Point(wraparound_x(x+1),y);
            set_pressure(this_pt);
            byte move_cut_thresh = 255;
            byte amt_tot_transfer = Math.Min(map[x, y].liquid_level, map[x, y].prev_liquid_level);
            if (amt_tot_transfer == 0)
                return;
            Point below_pt = new Point(x,y+1);
            if (below_pt.Y < map.GetLength(1) && is_valid_liquid_tile(below_pt) && get_liquid_level(below_pt) < 100)
            {
                byte amt_transfer = Math.Min(amt_can_add(below_pt), amt_tot_transfer);
                if (amt_transfer == 0)
                    return;
                else
                {
                    transfer_liquid(this_pt, below_pt, amt_transfer);
                    map[below_pt.X, below_pt.Y].liquid_pressure = 0;
                    amt_tot_transfer -= amt_transfer;
                }
            }
            if (amt_tot_transfer == 0)
                return;
            //left and right transfer of water now is possible.
            byte amt_move_left = 0;
            byte amt_move_right = 0;
            if(is_valid_liquid_tile(left_pt) && get_liquid_level(left_pt) < get_liquid_level(this_pt))
            { // can transfer to the left.
                amt_move_left = calc_transfer_even(this_pt, left_pt);
                if ((get_liquid_level(this_pt) - get_liquid_level(left_pt)) == 1)
                    amt_move_left = 1;
            }
            if (is_valid_liquid_tile(right_pt) && get_liquid_level(right_pt) < get_liquid_level(this_pt))
            { // can transfer to the right.
                amt_move_right = calc_transfer_even(this_pt, right_pt);
                if ((get_liquid_level(this_pt) - get_liquid_level(right_pt)) == 1)
                    amt_move_right = 1;
            }

            //the if and else if below do the actual moving of the water.
            if (amt_move_left >= amt_move_right && is_valid_liquid_tile(left_pt))
            { //left gets water first, right then gets leftovers?
                transfer_liquid(this_pt, left_pt, amt_move_left);
                amt_tot_transfer -= amt_move_left;
                if (is_valid_liquid_tile(right_pt))
                {
                    amt_move_right = calc_transfer_even(this_pt, right_pt);

                    if (amt_move_right > 0)
                    {
                        transfer_liquid(this_pt, right_pt, amt_move_right);
                        amt_tot_transfer -= amt_move_right;
                    }
                }
                return;
            }
            else if(amt_move_right > 0 && is_valid_liquid_tile(right_pt))
            { //right gets water first, left then gets leftovers?
                Euthenia.debug = "Move Right " + amt_move_right;
                transfer_liquid(this_pt, right_pt, amt_move_right);
                amt_tot_transfer -= amt_move_right;
                if (is_valid_liquid_tile(left_pt))
                {
                    amt_move_left = calc_transfer_even(this_pt, left_pt);

                    if (amt_move_left > 0)
                    {
                        transfer_liquid(this_pt, left_pt, amt_move_left);
                        amt_tot_transfer -= amt_move_left;
                    }
                }
                return;
            }
        }